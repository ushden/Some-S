import {Injectable} from '@nestjs/common';
import {DateTime} from 'luxon';

import {Event} from '../../../event/entities/event.entity';
import {MessageTypesForAdmin, MessageTypesForUser, StatusMapping} from '@enums';

export interface ITelegramUtilsService {}

@Injectable()
export class TelegramUtilsService implements ITelegramUtilsService {
  public static getEventIdFromActionData(data: string): number | null {
    if (!data) {
      return null;
    }

    const parts = data.split('-');
    const eventId = Number(parts[parts.length - 1]);

    return eventId || null;
  }

  public static generateHtmlEventForAdmin(event: Event, type: MessageTypesForAdmin): string {
    const services = event.services.map(({name}) => `\n<i>üàØ${name}</i>`).join('');
    const time = `<b>${DateTime.fromMillis(+event.start).toFormat('HH:mm')} - ${DateTime.fromMillis(
      +event.end,
    ).toFormat('HH:mm')}</b>`;
    const customer = `<b>${event.customer.name} - ${event.customer.phone}</b>`;
    const master = `<b>–ú–∞–π—Å—Ç–µ—Ä - ${event.master.name}</b>`;
    const price = `<i>üí≥–í–∞—Ä—Ç—ñ—Å—Ç—å</i> - <b>${event.price}</b> –≥—Ä–Ω.`;
    const leadTime = `<i>‚è≥–ü–æ—Ç—Ä—ñ–±–Ω–æ —á–∞—Å—É</i> - ${event.leadTime} —Ö–≤.`;
    
    if (type === MessageTypesForAdmin.events) {
      return `
			${time}\n<i>üåü–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É - ${
        StatusMapping[event.status]
      }</i>\n\n${customer}\n${master}\n${services}\n\n${price}\n${leadTime}
			\n
			–¢—É—Ç –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ —Å–¥–µ–ª–∞—Ç—å. KEK
		`;
    }
    
    if (type === MessageTypesForAdmin.confirmBeforeDelete) {
      return `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å? –ö–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º–∞–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–º—ñ–Ω—É`;
    }
  }

  public static generateHtmlMessageForUser(event: Event, type: MessageTypesForUser): string {
    if (!type) {
      return '';
    }

    const date = DateTime.fromMillis(+event.start).toFormat('dd/MM/yyyy HH:mm');
    const services = event.services.map(({name}) => `\n<i>üàØ${name}</i>`).join('');

    if (type === MessageTypesForUser.eventApprove) {
      return `–í–∞—à –∑–∞–ø–∏—Å –Ω–∞ <i>${date}</i> –ø—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–æ. –ü–æ—Å–ª—É–≥–∏:\n${services} –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –ø–æ–¥—É–º–∞—Ç—å`;
    }
    
    if (type === MessageTypesForUser.waitingApprove) {
      return `–í–∞—à –∑–∞–ø–∏—Å –Ω–∞ <i>${date}</i> –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –í–∞—Å –±—É–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω–æ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É. –ö–ï–ï–ï–ö`;
    }
    
    if (type === MessageTypesForUser.eventReject) {
      return `–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∂–µ —Å–∏–ª –Ω–µ–º–∞—î, –ø–æ—Ç–æ–º –ø—Ä–∏–¥—É–º–∞—é.........`;
    }
  }
}
